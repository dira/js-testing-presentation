# Testing Javascript applications

### Irina Dumitrascu

ruby & cofeescript dev | [dira.ro](http://dira.ro) ,  [@dira_geek_girl](http://twitter.com/dira_geek_girl)

23 August 2012

<div class="notes" markdown="1">
* coming from the Rails community, where automated testing is a first-class citizen
* testing JS automatically is slowly taking off
* want to convince you to test your JS, if you don't do that already
</div>

===

# Why?

===

# Well…

![](./images/sleep.jpg)
Image by [kaibara](http://www.flickr.com/photos/kaibara/)

===

# And…

A kitten dies *every time* you hit refresh & click to test

===

# How does it look like?

    expect(deadKittens).toEqual(0)
    
    expect($('#welcome').length).toEqual(1)
    
    TODO 
    describe

# Running it

<div class="notes">
* browser
* command line
</div>

# What do you need?

* separate your JS from the DOM (no inline JS)
* structure the code (classes, modules)
* separate the definition and the running step (dom.ready … )
* the smaller the thing to test, the better

# What do you test?

* models & functions
* views & flow

# Decoupling

1. No decoupling = integration tests


1. From the application (integrated unit tests)
    * fixtures
    * spy on HTTP requests
    
1. From all collaborators (true unit tests)

<div class="notes">
no decoupling - need to setup and maintain the global fixtures for the tests; done at the application level with a driver that executes JS as well

decouple from the application - need some integration tests

full decoupling - fastests; but need to test integration between collaborators as well
</div>

# Process

Write tests first

* write a test and watch it fail
* write the code
* now the test should pass
  * refactor?
  
<div class='notes'>
you need some discipline to do this, and when developing apps it's sometimes hard to think about how it should look like and not dive into the browser and refresh after each step.

however, with a bit of discipline (and some mocking on a piece of paper) you can actually think in advance about what you are doing, and what is the result you expect. then simply write the test for the desired result.
</div>
