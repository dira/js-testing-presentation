# Testing Javascript applications

### Irina Dumitrascu

ruby & cofeescript dev | [dira.ro](http://dira.ro) ,  [@dira\_geek\_girl](http://twitter.com/dira_geek_girl)

23 August 2012

___
* coming from the Rails community, where automated testing is a first-class citizen
* testing JS automatically is slowly taking off
* want to convince you to test your JS, if you don't do that already


# Why?


# Well…

![](/images/sleep.jpg)


# And…

A kitten dies *every time* you hit refresh & click to test


# How does it look like?

    expect(deadKittens).toEqual(0)

    expect($('#welcome').length).toEqual(1)

    expect($('a.more')).toBeVisible()
    $('a.more').clic()
    expect($('a.more')).not.toBeVisible()

    TODO
    describe



# Running it

___

* browser
* command line

# Kinds of testing

# Kinds of testing

## Unit testing

* break your code into small pieces
* best each of them individually

* fast and focused
* makes sure independent pieces work
* no guarantee that they work well together

TODO example


# Kinds of testing

## Integration testing

* create scenarios
* make sure the application works as expected by the user
* acceptance testing

* slow
* does not know about the implementation of individual pieces


TODO example


# Decoupling

1. No decoupling = integration tests


1. From the application (integrated unit tests)
    * fixtures
    * spy on HTTP requests

1. From all collaborators (true unit tests)

___

no decoupling - need to setup and maintain the global fixtures for the tests; done at the application level with a driver that executes JS as well

decouple from the application - need some integration tests

full decoupling - fastests; but need to test integration between collaborators as well

# Process

Write tests first

* write a test and watch it fail
* write the code
* now the test should pass
  * refactor?

___
you need some discipline to do this, and when developing apps it's sometimes hard to think about how it should look like and not dive into the browser and refresh after each step.

however, with a bit of discipline (and some mocking on a piece of paper) you can actually think in advance about what you are doing, and what is the result you expect. then simply write the test for the desired result.
</div>

# What do you need?

* separate your JS from the DOM (no inline JS)
* structure the code (classes, modules)
* separate the definition and the running step (dom.ready … )
* the smaller the thing to test, the better


# Don'ts

* do not test internal methods and state (just the public interface)
* do not test for the same thing in multiple tests
* do not test for texts appearing in the DOM (test for classes and ids)


# Do's

* test the public interface of each object
* test for classes and ids
* mock out dependecies (choose the level)
* maintain the tests as you do with the code

# Added benefits

* better structured code
* you'll sleep better

# Project details

install node and npm

    > npm install -g mocha
    > npm install chai
    > npm install jquery
    > mocha --compilers coffee:coffee-script


# Credits


Images

* [http://www.flickr.com/photos/kaibara/4068996309/](http://www.flickr.com/photos/kaibara/4068996309/)

CSS

* [markdown css](http://kevinburke.bitbucket.org/markdowncss/)
